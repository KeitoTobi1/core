syntax v1.0;

namespace "Omnius.Core.RocketPack.DefinitionCompiler.Tests.Internal";
option csharp_access_level "internal";

enum Enum1 : int8 {
    Yes = 0,
    No = 1,
}

enum Enum2 : int16 {
    Yes = 0,
    No = 1,
}

enum Enum3 : int32 {
    Yes = 0,
    No = 1,
}

enum Enum4 : int64 {
    Yes = 0,
    No = 1,
}

enum Enum5 : uint8 {
    Yes = 0,
    No = 1,
}

enum Enum6 : uint16 {
    Yes = 0,
    No = 1,
}

enum Enum7 : uint32 {
    Yes = 0,
    No = 1,
}

enum Enum8: uint64 {
    Yes = 0,
    No = 1,
}

[csharp_struct]
struct StructElement_Struct {
    X0: bool,
}

[csharp_struct]
message MessageElement_Struct {
    X0: bool,
}

struct StructElement_Class {
    X0: bool,
}

message MessageElement_Class {
    X0: bool,
}

[csharp_struct]
struct Struct_Struct {
    X0: bool,
    X1: int8,
    X2: int16,
    X3: int32,
    X4: int64,
    X5: uint8,
    X6: uint16,
    X7: uint32,
    X8: uint64,
    X9: Enum1,
    X10: Enum2,
    X11: Enum3,
    X12: Enum4,
    X13: Enum5,
    X14: Enum6,
    X15: Enum7,
    X16: Enum8,
    X17: float32,
    X18: float64,
    X19: string(capacity: 128), // maximum bytes size is 128
    X20: timestamp,
    X21: bytes(capacity: 256), // maximum bytes size is 256
    X22: bytes(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>(capacity: 16),
    X24: map<uint8, string(capacity: 128)>(capacity: 32),
    X25: StructElement_Struct,
    X26: MessageElement_Struct,
    X27: StructElement_Class,
    X28: MessageElement_Class,
}

[csharp_struct]
message Message_Struct {
    X0: bool,
    X1: int8,
    X2: int16,
    X3: int32,
    X4: int64,
    X5: uint8,
    X6: uint16,
    X7: uint32,
    X8: uint64,
    X9: Enum1,
    X10: Enum2,
    X11: Enum3,
    X12: Enum4,
    X13: Enum5,
    X14: Enum6,
    X15: Enum7,
    X16: Enum8,
    X17: float32,
    X18: float64,
    X19: string(capacity: 128), // maximum bytes size is 128
    X20: timestamp,
    X21: bytes(capacity: 256), // maximum bytes size is 256
    X22: bytes(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>(capacity: 16),
    X24: map<uint8, string(capacity: 128)>(capacity: 32),
    X25: StructElement_Struct,
    X26: MessageElement_Struct,
    X27: StructElement_Class,
    X28: MessageElement_Class,
}

[csharp_struct]
message NullableMessage_Struct {
    X0: bool?,
    X1: int8?,
    X2: int16?,
    X3: int32?,
    X4: int64?,
    X5: uint8?,
    X6: uint16?,
    X7: uint32?,
    X8: uint64?,
    X9: Enum1?,
    X10: Enum2?,
    X11: Enum3?,
    X12: Enum4?,
    X13: Enum5?,
    X14: Enum6?,
    X15: Enum7?,
    X16: Enum8?,
    X17: float32?,
    X18: float64?,
    X19: string?(capacity: 128), // maximum bytes size is 128
    X20: timestamp?,
    X21: bytes?(capacity: 256), // maximum bytes size is 256
    X22: bytes?(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>?(capacity: 16),
    X24: map<uint8, string(capacity: 128)>?(capacity: 32),
    X25: StructElement_Struct?,
    X26: MessageElement_Struct?,
    X27: StructElement_Class?,
    X28: MessageElement_Class?,
}

struct Struct_Class {
    X0: bool,
    X1: int8,
    X2: int16,
    X3: int32,
    X4: int64,
    X5: uint8,
    X6: uint16,
    X7: uint32,
    X8: uint64,
    X9: Enum1,
    X10: Enum2,
    X11: Enum3,
    X12: Enum4,
    X13: Enum5,
    X14: Enum6,
    X15: Enum7,
    X16: Enum8,
    X17: float32,
    X18: float64,
    X19: string(capacity: 128), // maximum bytes size is 128
    X20: timestamp,
    X21: bytes(capacity: 256), // maximum bytes size is 256
    X22: bytes(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>(capacity: 16),
    X24: map<uint8, string(capacity: 128)>(capacity: 32),
    X25: StructElement_Struct,
    X26: MessageElement_Struct,
    X27: StructElement_Class,
    X28: MessageElement_Class,
}

message Message_Class {
    X0: bool,
    X1: int8,
    X2: int16,
    X3: int32,
    X4: int64,
    X5: uint8,
    X6: uint16,
    X7: uint32,
    X8: uint64,
    X9: Enum1,
    X10: Enum2,
    X11: Enum3,
    X12: Enum4,
    X13: Enum5,
    X14: Enum6,
    X15: Enum7,
    X16: Enum8,
    X17: float32,
    X18: float64,
    X19: string(capacity: 128), // maximum bytes size is 128
    X20: timestamp,
    X21: bytes(capacity: 256), // maximum bytes size is 256
    X22: bytes(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>(capacity: 16),
    X24: map<uint8, string(capacity: 128)>(capacity: 32),
    X25: StructElement_Struct,
    X26: MessageElement_Struct,
    X27: StructElement_Class,
    X28: MessageElement_Class,
}

message NullableMessage_Class {
    X0: bool?,
    X1: int8?,
    X2: int16?,
    X3: int32?,
    X4: int64?,
    X5: uint8?,
    X6: uint16?,
    X7: uint32?,
    X8: uint64?,
    X9: Enum1?,
    X10: Enum2?,
    X11: Enum3?,
    X12: Enum4?,
    X13: Enum5?,
    X14: Enum6?,
    X15: Enum7?,
    X16: Enum8?,
    X17: float32?,
    X18: float64?,
    X19: string?(capacity: 128), // maximum bytes size is 128
    X20: timestamp?,
    X21: bytes?(capacity: 256), // maximum bytes size is 256
    X22: bytes?(capacity: 256, recyclable: true), // use csharp_recyclable memory
    X23: vector<string(capacity: 128)>?(capacity: 16),
    X24: map<uint8, string(capacity: 128)>?(capacity: 32),
    X25: StructElement_Struct?,
    X26: MessageElement_Struct?,
    X27: StructElement_Class?,
    X28: MessageElement_Class?,
}

message RpcParam {
    P1: int32,
}

message RpcResult {
    R1: int32,
}

service RpcService {
    F1: (RpcParam) -> (RpcResult),
    F2: (RpcParam) -> (),
    F3: () -> (RpcResult),
    F4: () -> (),
}
